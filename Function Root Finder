#Define the function whose root you want
def root(x):
    y = 3 * x ** 9 + 6 * x ** 3 + 7 * x ** 2 + 9 * x + 11
    return y


# Descartes rule of signs
for i in range(- 100, 100):                             #Increase these parameters if it can't find a root
    m = root(i)
    n = root(i + 1)
    if m * n <= 0 :
        a = i
        b = i + 1


# Defining a Derivative
def deri(x):
    return (root(x + 0.0000001) - root(x)) / 0.0000001    #increase the number of zero to increase the precision


try:
    print('a root is between', a, '&', b)
    q = float(((a + b)) / 2)

    # Newton's Method
    for j in range(0, 10):                                 #increase this range to increase the precision
        q = q - ((float(root(q) / float(deri(q)))))
    print('that root is', q)
    print('precision is', 100*(1-root(q)),'%')
except:
    print("Can't find a root")
